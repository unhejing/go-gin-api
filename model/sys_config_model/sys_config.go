///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package sys_config_model

import (
	"fmt"
	"time"

	"github.com/unhejing/go-gin-api/utils/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *SysConfig {
	return new(SysConfig)
}

func NewQueryBuilder() *sysConfigModelQueryBuilder {
	return new(sysConfigModelQueryBuilder)
}

func (t *SysConfig) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type sysConfigModelQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *sysConfigModelQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *sysConfigModelQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&SysConfig{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *sysConfigModelQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&SysConfig{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *sysConfigModelQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&SysConfig{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *sysConfigModelQueryBuilder) First(db *gorm.DB) (*SysConfig, error) {
	ret := &SysConfig{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *sysConfigModelQueryBuilder) QueryOne(db *gorm.DB) (*SysConfig, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *sysConfigModelQueryBuilder) QueryAll(db *gorm.DB) ([]*SysConfig, error) {
	var ret []*SysConfig
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *sysConfigModelQueryBuilder) Limit(limit int) *sysConfigModelQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *sysConfigModelQueryBuilder) Offset(offset int) *sysConfigModelQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereId(p mysql.Predicate, value int32) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereIdIn(value []int32) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereIdNotIn(value []int32) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderById(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereNote(p mysql.Predicate, value string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereNoteIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereNoteNotIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByNote(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "note "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsName(p mysql.Predicate, value string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_name", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsNameIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_name", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsNameNotIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByParamsName(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "params_name "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsKey(p mysql.Predicate, value string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_key", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsKeyIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_key", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsKeyNotIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_key", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByParamsKey(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "params_key "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsValue(p mysql.Predicate, value string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_value", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsValueIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_value", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereParamsValueNotIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params_value", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByParamsValue(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "params_value "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereChannelTag(p mysql.Predicate, value string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "channel_tag", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereChannelTagIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "channel_tag", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereChannelTagNotIn(value []string) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "channel_tag", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByChannelTag(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "channel_tag "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereCreatedTime(p mysql.Predicate, value time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereCreatedTimeIn(value []time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereCreatedTimeNotIn(value []time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByCreatedTime(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_time "+order)
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereUpdatedTime(p mysql.Predicate, value time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_time", p),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereUpdatedTimeIn(value []time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_time", "IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) WhereUpdatedTimeNotIn(value []time.Time) *sysConfigModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysConfigModelQueryBuilder) OrderByUpdatedTime(asc bool) *sysConfigModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_time "+order)
	return qb
}
